{"componentChunkName":"component---node-modules-gatsby-theme-code-notes-src-templates-note-js","path":"/create-statically-linked-libs/","result":{"data":{"mdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Create Statically linked libraries\",\n  \"tags\": [\"cpp\", \"libraries\"]\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"create-statically-linked-libraries\"\n  }, \"Create Statically linked libraries\"), mdx(\"p\", null, \"To start with, let's create a basic library that we will then be able to consume from other programs.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-cpp\"\n  }), \"#include <iostream>\\n\\nvoid hello() {\\n    std::cout << \\\"Hello World from the library!\\\" << std::endl;\\n}\\n\")), mdx(\"p\", null, \"you need to type the following command:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-sh\"\n  }), \"$ clang -c hello.cpp\\n\")), mdx(\"p\", null, \"The flag -c tells clang to output an object file. After the flag, we state which cpp file to use when building the object file. This command will produce the file hello.o\"), mdx(\"p\", null, \"we use the following command to generate an .a file:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-sh\"\n  }), \"$ ar rvs mylib.a hello.o\\n\")), mdx(\"p\", null, \"We can now consume our newly created library in other projects. Let's create a very simple program that will use our library saved the file as main.cpp:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-cpp\"\n  }), \"void hello();\\n\\nint main() {\\n    hello();\\n}\\n\")), mdx(\"p\", null, \"This program will call the hello unction which the compiler we then look for an\\nimplementation in our linked libraries. Compile the program and link our static library with the following command:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-sh\"\n  }), \"$ clang main.cpp mylib.a -o main\\n\")), mdx(\"h1\", {\n    \"id\": \"compiling-and-linking-dynamic-libraries\"\n  }, \"Compiling and linking dynamic libraries\"), mdx(\"p\", null, \"Following are the step for compiling and linking dynamic libraries:\"), mdx(\"p\", null, \"The hello.cpp file now look like:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-cpp\"\n  }), \"#include <iostream>\\n\\n__attribute__((visibility(\\\"default\\\")))\\nvoid hello() {\\n    std::cout << \\\"Hello World from the dynamic library!\\\" << std::endl;\\n}\\n\")), mdx(\"p\", null, \"We can create a .dylib from the terminal shell with the following command:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-sh\"\n  }), \"$ clang -dynamiclib -o mylib.dylib hello.cpp\\n\")), mdx(\"p\", null, \"Next, we can link and build our program with our newly created library exactly like the previous example with the following commands:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-sh\"\n  }), \"$ clang main.cpp mylib.dylib -o main\\n\")), mdx(\"p\", null, \"One of the bonuses is the fact that when you make changes to a dynamically linked library, you do not have to recompile the entire program; we only have to recompile the library. To see this in action, let's make a small change to the hello.cpp\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-cpp\"\n  }), \"#include <iostream>\\n\\n__attribute__((visibility(\\\"default\\\")))\\nvoid hello() {\\n    std::cout << \\\"Hello World from the dynamic library!\\\" << std::endl;\\n    std::cout << \\\"Version 2\\\" << std::endl;\\n}\\n\")), mdx(\"p\", null, \"Next, we can recompile our library with the same command as before:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-sh\"\n  }), \"$ clang -dynamiclib -o mylib.dylib hello.cpp\\n\")), mdx(\"p\", null, \"This makes upgrading very easy, but can also quickly lead dll mismatching on machines without the updated library, often referred to as \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Dll Hell\"), \".\"));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"Create Statically linked libraries","tags":["cpp","libraries"],"emoji":null,"link":null},"fields":{"dateModified":"20th Jun 2020","slug":"/create-statically-linked-libs/"},"tableOfContents":{"items":[{"url":"#create-statically-linked-libraries","title":"Create Statically linked libraries"},{"url":"#compiling-and-linking-dynamic-libraries","title":"Compiling and linking dynamic libraries"}]},"parent":{"__typename":"File","relativePath":"create-statically-linked-libs.md"}}},"pageContext":{"id":"c681738c-2c84-5760-abdb-e7ebb0428515","previous":{"id":"23797072-3a6e-55e4-bfb1-f765391f688e","frontmatter":{"title":"How to use Axios with JavaScript","tags":["javascript","Axios"]},"fields":{"slug":"/how-to-use-axio-with-javascript/"}},"next":null,"hasUntagged":false,"basePath":"/"}}}